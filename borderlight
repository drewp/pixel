#!/usr/bin/python

"""
Take the average color of the areas on the top of the screen and
display them on shiftbrites.

This code is by Drew Perttula, but includes an adaptation of code from
http://nobodymuch.org/LtMacroAPI-test_for_cheos

#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


This takes about 8ms to grab 105000 pixels in two chunks.

 <nolan> drewp: You want XSHMGetImage.  In theory, if your driver is
 clever enough, it should just be an asynchronous DMA from the card to
 your userspace.  In practice, it is probably a memcpy from VRAM
 directly to your SHM memory.
"""

import sys, time
import Xlib
import Image, ImageStat

from Xlib import X, display, Xutil, Xcursorfont, protocol, error
from Xlib.protocol import request
sys.path.append("shiftweb")
from multiclient import setColor8

# from http://nobodymuch.org/LtMacroAPI-test_for_cheos
def getPilImage(targetwindow, origin_x, origin_y, width=1, height=1):
    AllPlanes = ~0 # from /usr/X11R6/include/Xlib.h
    ret = targetwindow.get_image(origin_x, origin_y, width, height, X.ZPixmap, AllPlanes)
    if ret == 0:
        raise ValueError("get_image returned %d" % ret)
    retimage = Image.fromstring("RGBX", (width, height), ret.data, "raw", "BGRX")
    return retimage.convert("RGB")

mydisplay = display.Display()
root = mydisplay.screen().root

lastSent = {} # chan : color
while True:
    for chan, xoff in [('deskLeft', 0), ('deskRight', 1050)]:
        #t1 = time.time()
        img = getPilImage(root, xoff, 0, 1050, 50)
        #print time.time() - t1
        mean = ImageStat.Stat(img).mean
        color = map(int, mean)
        if lastSent.get(chan, None) != color:
            setColor8(chan, color)
            lastSent[chan] = color
    time.sleep(.05)
